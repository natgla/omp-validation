######## OpenMP Validation Suite V 3.0a ######
## Repetitions:  20                       ####
## Loop Count :   1000                    ####
##############################################
Testing omp parallel sections nowait



1. run of test_omp_sections_nowait out of 20

Thread nr 0 enters first section and gets sleeping.
Thread nr 1 executed work in the first section.
Thread nr 1 executed work in the second section and controls the value of count
cout was 0Thread nr 0 woke up an set count to 1.
Thread nr 0 executed work in the second section.
Test successful.


2. run of test_omp_sections_nowait out of 20

Thread nr 0 enters first section and gets sleeping.
Thread nr 1 executed work in the first section.
Thread nr 1 executed work in the second section and controls the value of count
cout was 0Thread nr 0 woke up an set count to 1.
Thread nr 0 executed work in the second section.
Test successful.


3. run of test_omp_sections_nowait out of 20

Thread nr 0 enters first section and gets sleeping.
Thread nr 1 executed work in the first section.
Thread nr 1 executed work in the second section and controls the value of count
cout was 0Thread nr 0 woke up an set count to 1.
Thread nr 0 executed work in the second section.
Test successful.


4. run of test_omp_sections_nowait out of 20

Thread nr 0 enters first section and gets sleeping.
Thread nr 1 executed work in the first section.
Thread nr 1 executed work in the second section and controls the value of count
cout was 0Thread nr 0 woke up an set count to 1.
Thread nr 0 executed work in the second section.
Test successful.


5. run of test_omp_sections_nowait out of 20

Thread nr 0 enters first section and gets sleeping.
Thread nr 1 executed work in the first section.
Thread nr 1 executed work in the second section and controls the value of count
cout was 0Thread nr 0 woke up an set count to 1.
Thread nr 0 executed work in the second section.
Test successful.


6. run of test_omp_sections_nowait out of 20

Thread nr 0 enters first section and gets sleeping.
Thread nr 1 executed work in the first section.
Thread nr 1 executed work in the second section and controls the value of count
cout was 0Thread nr 0 woke up an set count to 1.
Thread nr 0 executed work in the second section.
Test successful.


7. run of test_omp_sections_nowait out of 20

Thread nr 0 enters first section and gets sleeping.
Thread nr 1 executed work in the first section.
Thread nr 1 executed work in the second section and controls the value of count
cout was 0Thread nr 0 woke up an set count to 1.
Thread nr 0 executed work in the second section.
Test successful.


8. run of test_omp_sections_nowait out of 20

Thread nr 0 enters first section and gets sleeping.
Thread nr 1 executed work in the first section.
Thread nr 1 executed work in the second section and controls the value of count
cout was 0Thread nr 0 woke up an set count to 1.
Thread nr 0 executed work in the second section.
Test successful.


9. run of test_omp_sections_nowait out of 20

Thread nr 0 enters first section and gets sleeping.
Thread nr 1 executed work in the first section.
Thread nr 1 executed work in the second section and controls the value of count
cout was 0Thread nr 0 woke up an set count to 1.
Thread nr 0 executed work in the second section.
Test successful.


10. run of test_omp_sections_nowait out of 20

Thread nr 0 enters first section and gets sleeping.
Thread nr 1 executed work in the first section.
Thread nr 1 executed work in the second section and controls the value of count
cout was 0Thread nr 0 woke up an set count to 1.
Thread nr 0 executed work in the second section.
Test successful.


11. run of test_omp_sections_nowait out of 20

Thread nr 0 enters first section and gets sleeping.
Thread nr 1 executed work in the first section.
Thread nr 1 executed work in the second section and controls the value of count
cout was 0Thread nr 0 woke up an set count to 1.
Thread nr 0 executed work in the second section.
Test successful.


12. run of test_omp_sections_nowait out of 20

Thread nr 0 enters first section and gets sleeping.
Thread nr 1 executed work in the first section.
Thread nr 1 executed work in the second section and controls the value of count
cout was 0Thread nr 0 woke up an set count to 1.
Thread nr 0 executed work in the second section.
Test successful.


13. run of test_omp_sections_nowait out of 20

Thread nr 0 enters first section and gets sleeping.
Thread nr 1 executed work in the first section.
Thread nr 1 executed work in the second section and controls the value of count
cout was 0Thread nr 0 woke up an set count to 1.
Thread nr 0 executed work in the second section.
Test successful.


14. run of test_omp_sections_nowait out of 20

Thread nr 0 enters first section and gets sleeping.
Thread nr 1 executed work in the first section.
Thread nr 1 executed work in the second section and controls the value of count
cout was 0Thread nr 0 woke up an set count to 1.
Thread nr 0 executed work in the second section.
Test successful.


15. run of test_omp_sections_nowait out of 20

Thread nr 0 enters first section and gets sleeping.
Thread nr 1 executed work in the first section.
Thread nr 1 executed work in the second section and controls the value of count
cout was 0Thread nr 0 woke up an set count to 1.
Thread nr 0 executed work in the second section.
Test successful.


16. run of test_omp_sections_nowait out of 20

Thread nr 0 enters first section and gets sleeping.
Thread nr 1 executed work in the first section.
Thread nr 1 executed work in the second section and controls the value of count
cout was 0Thread nr 0 woke up an set count to 1.
Thread nr 0 executed work in the second section.
Test successful.


17. run of test_omp_sections_nowait out of 20

Thread nr 0 enters first section and gets sleeping.
Thread nr 1 executed work in the first section.
Thread nr 1 executed work in the second section and controls the value of count
cout was 0Thread nr 0 woke up an set count to 1.
Thread nr 0 executed work in the second section.
Test successful.


18. run of test_omp_sections_nowait out of 20

Thread nr 0 enters first section and gets sleeping.
Thread nr 1 executed work in the first section.
Thread nr 1 executed work in the second section and controls the value of count
cout was 0Thread nr 0 woke up an set count to 1.
Thread nr 0 executed work in the second section.
Test successful.


19. run of test_omp_sections_nowait out of 20

Thread nr 0 enters first section and gets sleeping.
Thread nr 1 executed work in the first section.
Thread nr 1 executed work in the second section and controls the value of count
cout was 0Thread nr 0 woke up an set count to 1.
Thread nr 0 executed work in the second section.
Test successful.


20. run of test_omp_sections_nowait out of 20

Thread nr 0 enters first section and gets sleeping.
Thread nr 1 executed work in the first section.
Thread nr 1 executed work in the second section and controls the value of count
cout was 0Thread nr 0 woke up an set count to 1.
Thread nr 0 executed work in the second section.
Test successful.

Directive worked without errors.

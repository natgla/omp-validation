#
# By Chunhua Liao
# University of Houston
#
#-------------------------------------------------
#Set the desired compiler and options
#change NUM_THREADS to the proper one on your machine
#-------------------------------------------------

# the number of threads this validation suite will use
NUM_THREADS= 2

# Fujitsu Compilers:
#CC = fcc
#CFLAGS = -KOMP,fast_GP2=2
#CLINKFLAGS = $(CFLAGS)
#
# PGI compilers
#
#CC = pgcc
#CFLAGS = -fast -mp 
#CLINKFLAGS = $(CFLAGS)

# Intel compilers:
#
#CC = ecc
#CC = icc
#CFLAGS = -O3 -ipo -openmp
#CFLAGS = -Wall -O0 -openmp
#CFLAGS =  -openmp
#CLINKFLAGS = $(CFLAGS)

# Omni compilers:
#
#CC = ompcc
#CFLAGS = -O3 -lm 
#CLINKFLAGS = $(CFLAGS)

# Assure compilers:
#
#CC = assurec
#CFLAGS = -O3 -WApname=project -DUSE_ASSURE=1
#CLINKFLAGS = $(CFLAGS)

# NEC:
#
#CC = c++ 
#CC = sxc++ 
#CFLAGS = -Popenmp
#CLINKFLAGS = $(CFLAGS)

#
# Hitachi:
#
#CC = xcc 
#CFLAGS = -O4 -pvec +Op -parallel -omp
#CLINKFLAGS = $(CFLAGS)
#
# SGI:
#
#
#CC = cc
#CFLAGS = -mp -lm 
#CLINKFLAGS = $(CFLAGS)

# IBM compilers:
#CC = xlc_r
#CFLAGS = -qsmp=omp -lm
#CLINKFLAGS = $(CFLAGS)
#

# SUN compilers
#CC = cc
#CFLAGS = -xopenmp -lm
#CLINKFLAGS = $(CFLAGS)
#
# open64 compilers
#CC = opencc
#CFLAGS = -mp -Ofast -lm
#CLINKFLAGS = $(CFLAGS)

# ORC compilers
#CC = orcc
#CFLAGS = -mp
#CLINKFLAGS = $(CFLAGS)

#Pathscale compilers
#CC = pathcc
#CFLAGS = -mp -Ofast -lm
#CLINKFLAGS = $(CFLAGS)

ifdef testfile
TESTFILE = $(testfile)
endif

ifdef TESTFILE
 TEST_FILENAME = $(TESTFILE)
else
 TEST_FILENAME = ALL_TEST
endif

.PHONEY:print_help
print_help:
	@echo "--------------------------------------------------------"
	@echo "1. Edit Makefile for proper compiler command and options"
	@echo "--------------------------------------------------------"
	@echo "2. Run tests: "
	@echo "     gmake run"
	@echo "     gmake run TESTFILE=filename"
	@echo "where filename may be one of the following:"
	@echo "   OMP1_TEST - execute omp version 1 tests"
	@echo "   OMP2_TEST - execute omp version 2 tests"
	@echo "   ALL_TEST  - execute all above tests(the default one)"
	@echo "   CUSTOM_TEST - execute a configurable subset of the tests"
	@echo "--------------------------------------------------------"
	@echo "3. Clean up first before any new exectuion:"
	@echo "     gmake clean "
	@echo "--------------------------------------------------------"

.PHONY: test
test:main

# precompilation tries to generate .o files for feasible tests
# A header is generated from available .o files
feasible_test.h:
	 ./preCompilation $(TEST_FILENAME) $(CC) $(CFLAGS)

#compile main.c and link with other objects to get  executables
main:feasible_test.h
	$(CC) $(CFLAGS) $(CLINKFLAGS) -o main main.c *.o
	
clean:
	rm -f *.o failed.compilation feasible_test.h main test.log *~ 

run:clean main 
	-rm -f test.log 
	(OMP_NUM_THREADS=$(NUM_THREADS); export OMP_NUM_THREADS; ./main)

